name: Build Kinic Desktop

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false
      
      - name: Make repo safe for git + disable prompts
        run: |
          git config --global --add safe.directory "$env:GITHUB_WORKSPACE"
          git config --global --add safe.directory "$env:GITHUB_WORKSPACE/kinic-api"
          git config --global user.email "ci@example.com"
          git config --global user.name "ci"
          echo "GIT_TERMINAL_PROMPT=0" | Out-File -FilePath $env:GITHUB_ENV -Append

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.6.0 pyautogui pyperclip pillow

      - name: Create .ico (Windows)
        shell: python
        run: |
          from PIL import Image, ImageDraw
          img = Image.new('RGBA', (256,256), (0,0,0,0))
          d = ImageDraw.Draw(img)
          d.ellipse((10,10,246,246), fill="#2196F3")
          d.text((128,128),"K", fill="white", anchor="mm")
          img.save("kinic-icon.ico")

      - name: PyInstaller (Windows)
        run: |
          pyinstaller --name=KinicDesktop --onefile --windowed --icon=kinic-icon.ico --add-data="kinic-api.py;." kinic-final.py

      - uses: actions/upload-artifact@v4
        with:
          name: KinicDesktop-Windows
          path: dist/KinicDesktop.exe
          retention-days: 30

  build-macos:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false
      
      - name: Make repo safe for git + disable prompts
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global --add safe.directory "$GITHUB_WORKSPACE/kinic-api"
          git config --global user.email "ci@example.com"
          git config --global user.name "ci"
          echo "GIT_TERMINAL_PROMPT=0" >> $GITHUB_ENV

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.6.0 pyautogui pyperclip pillow pyobjc-framework-Quartz rubicon-objc

      - name: Create .icns (macOS)
        run: |
          mkdir -p icon.iconset
          python << 'PY'
          from PIL import Image, ImageDraw
          img = Image.new('RGBA', (1024,1024), (0,0,0,0))
          d = ImageDraw.Draw(img)
          d.ellipse((64,64,960,960), fill="#2196F3")
          d.text((512,512),"K", fill="white", anchor="mm")
          img.save("icon_1024.png")
          PY
          sips -z 16 16     icon_1024.png --out icon.iconset/icon_16x16.png
          sips -z 32 32     icon_1024.png --out icon.iconset/icon_16x16@2x.png
          sips -z 32 32     icon_1024.png --out icon.iconset/icon_32x32.png
          sips -z 64 64     icon_1024.png --out icon.iconset/icon_32x32@2x.png
          sips -z 128 128   icon_1024.png --out icon.iconset/icon_128x128.png
          sips -z 256 256   icon_1024.png --out icon.iconset/icon_128x128@2x.png
          sips -z 256 256   icon_1024.png --out icon.iconset/icon_256x256.png
          sips -z 512 512   icon_1024.png --out icon.iconset/icon_256x256@2x.png
          cp icon_1024.png icon.iconset/icon_512x512.png
          cp icon_1024.png icon.iconset/icon_512x512@2x.png
          iconutil -c icns icon.iconset -o kinic-icon.icns

      - name: PyInstaller (macOS)
        run: |
          pyinstaller --name=KinicDesktop --onefile --windowed \
            --icon=kinic-icon.icns \
            --add-data="kinic-api.py:." \
            --osx-bundle-identifier=com.kinic.desktop \
            kinic-final.py

      - name: Create DMG
        run: |
          mkdir -p dmg
          cp -r dist/KinicDesktop.app dmg/
          hdiutil create -volname "Kinic Desktop" -srcfolder dmg -ov -format UDZO KinicDesktop.dmg

      - uses: actions/upload-artifact@v4
        with:
          name: KinicDesktop-macOS
          path: KinicDesktop.dmg
          retention-days: 30

  create-summary:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Create artifact download summary
      run: |
        echo "## ðŸŽ‰ Build Artifacts Available!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Download Links:" >> $GITHUB_STEP_SUMMARY
        echo "- [Windows Executable](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> $GITHUB_STEP_SUMMARY
        echo "- [macOS DMG](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Direct Download (requires GitHub login):" >> $GITHUB_STEP_SUMMARY
        echo "Visit the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) and scroll to the Artifacts section." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Artifacts will be retained for 30 days." >> $GITHUB_STEP_SUMMARY

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          KinicDesktop-Windows/KinicDesktop.exe
          KinicDesktop-macOS/KinicDesktop.dmg
        body: |
          # Kinic Desktop Release
          
          ## Download for your platform:
          - **Windows**: `KinicDesktop.exe`
          - **macOS**: `KinicDesktop.dmg`
          
          ## Installation:
          
          ### Windows
          1. Download `KinicDesktop.exe`
          2. Double-click to run
          3. If Windows Defender warns, click "More info" â†’ "Run anyway"
          
          ### macOS
          1. Download `KinicDesktop.dmg`
          2. Open the DMG file
          3. Drag Kinic Desktop to Applications
          4. First run: Right-click â†’ Open (to bypass Gatekeeper)
          
          ## What's New
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}